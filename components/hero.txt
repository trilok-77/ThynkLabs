"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { 
  ArrowRight, 
  Upload, 
  Download, 
  Image, 
  FileImage, 
  Zap,
  Sparkles,
  AlertCircle,
  CheckCircle 
} from "lucide-react"

const conversionRoutes = [
  // JPG Conversions
  { from: "JPG", to: "PNG", href: "/jpg-to-png", available: true },
  { from: "JPG", to: "WebP", href: "/jpg-to-webp", available: true },
  { from: "JPG", to: "AVIF", href: "/jpg-to-avif", available: true },
  { from: "JPG", to: "GIF", href: "/jpg-to-gif", available: true },
  { from: "JPG", to: "BMP", href: "/jpg-to-bmp", available: true },
  { from: "JPG", to: "TIFF", href: "/jpg-to-tiff", available: true },
  { from: "JPG", to: "ICO", href: "/jpg-to-ico", available: true },
  { from: "JPG", to: "PDF", href: "/jpg-to-pdf", available: true },

  // PNG Conversions
  { from: "PNG", to: "JPG", href: "/png-to-jpg", available: true },
  { from: "PNG", to: "WebP", href: "/png-to-webp", available: true },
  { from: "PNG", to: "AVIF", href: "/png-to-avif", available: true },
  { from: "PNG", to: "GIF", href: "/png-to-gif", available: true },
  { from: "PNG", to: "BMP", href: "/png-to-bmp", available: true },
  { from: "PNG", to: "TIFF", href: "/png-to-tiff", available: true },
  { from: "PNG", to: "ICO", href: "/png-to-ico", available: true },
  { from: "PNG", to: "PDF", href: "/png-to-pdf", available: true },

  // WebP Conversions
  { from: "WebP", to: "JPG", href: "/webp-to-jpg", available: true },
  { from: "WebP", to: "PNG", href: "/webp-to-png", available: true },
  { from: "WebP", to: "GIF", href: "/webp-to-gif", available: true },
  { from: "WebP", to: "AVIF", href: "/webp-to-avif", available: true },
  { from: "WebP", to: "BMP", href: "/webp-to-bmp", available: false },
  { from: "WebP", to: "TIFF", href: "/webp-to-tiff", available: false },

  // AVIF Conversions
  { from: "AVIF", to: "JPG", href: "/avif-to-jpg", available: true },
  { from: "AVIF", to: "PNG", href: "/avif-to-png", available: true },
  { from: "AVIF", to: "WebP", href: "/avif-to-webp", available: true },
  { from: "AVIF", to: "GIF", href: "/avif-to-gif", available: false },

  // GIF Conversions
  { from: "GIF", to: "JPG", href: "/gif-to-jpg", available: true },
  { from: "GIF", to: "PNG", href: "/gif-to-png", available: true },
  { from: "GIF", to: "WebP", href: "/gif-to-webp", available: true },
  { from: "GIF", to: "MP4", href: "/gif-to-mp4", available: true },
  { from: "GIF", to: "AVIF", href: "/gif-to-avif", available: false },

  // TIFF Conversions
  { from: "TIFF", to: "JPG", href: "/tiff-to-jpg", available: true },
  { from: "TIFF", to: "PNG", href: "/tiff-to-png", available: true },
  { from: "TIFF", to: "PDF", href: "/tiff-to-pdf", available: true },
  { from: "TIFF", to: "WebP", href: "/tiff-to-webp", available: false },

  // BMP Conversions
  { from: "BMP", to: "JPG", href: "/bmp-to-jpg", available: true },
  { from: "BMP", to: "PNG", href: "/bmp-to-png", available: true },
  { from: "BMP", to: "WebP", href: "/bmp-to-webp", available: false },

  // ICO Conversions
  { from: "ICO", to: "PNG", href: "/ico-to-png", available: true },
  { from: "ICO", to: "JPG", href: "/ico-to-jpg", available: true },

  // SVG Conversions
  { from: "SVG", to: "PNG", href: "/svg-to-png", available: true },
  { from: "SVG", to: "JPG", href: "/svg-to-jpg", available: true },
  { from: "SVG", to: "PDF", href: "/svg-to-pdf", available: true },

  // PDF Conversions
  { from: "PDF", to: "JPG", href: "/pdf-to-jpg", available: true },
  { from: "PDF", to: "PNG", href: "/pdf-to-png", available: true },
]

const formatIcons = {
  JPG: FileImage,
  PNG: FileImage,
  WebP: Zap,
  AVIF: Sparkles,
  GIF: Image,
  TIFF: FileImage,
  BMP: FileImage,
  ICO: FileImage,
  SVG: Image,
  PDF: FileImage,
  MP4: FileImage,
}

const formatColors = {
  JPG: "bg-blue-500",
  PNG: "bg-green-500", 
  WebP: "bg-purple-500",
  AVIF: "bg-pink-500",
  GIF: "bg-orange-500",
  TIFF: "bg-indigo-500",
  BMP: "bg-gray-500",
  ICO: "bg-red-500",
  SVG: "bg-teal-500",
  PDF: "bg-red-600",
  MP4: "bg-yellow-500",
}


export default function Hero() {
  const [fromFormat, setFromFormat] = useState("")
  const [toFormat, setToFormat] = useState("")
  const [availableToFormats, setAvailableToFormats] = useState([])
  const [conversionResult, setConversionResult] = useState(null)

  const allFormats = [...new Set([...conversionRoutes.map(r => r.from), ...conversionRoutes.map(r => r.to)])]

  useEffect(() => {
    if (fromFormat) {
      // Get available "to" formats based on the selected "from" format
      const availableFormats = conversionRoutes
        .filter(route => route.from === fromFormat)
        .map(route => route.to)
      
      setAvailableToFormats(availableFormats)
      
      // Reset the "to" format when changing the "from" format
      setToFormat("")
      setConversionResult(null)
    }
  }, [fromFormat, toFormat]) // Add toFormat to the dependency array

  useEffect(() => {
    if (fromFormat && toFormat) {
      const route = conversionRoutes.find(r => r.from === fromFormat && r.to === toFormat)
      setConversionResult(route || null)
    } else {
      setConversionResult(null)
    }
  }, [fromFormat, toFormat])

  const handleConvert = () => {
    if (conversionResult?.available) {
      // In a real app, this would redirect to the conversion page
      window.location.href = conversionResult.href
    }
  }

  const getFormatIcon = (format) => {
    const IconComponent = formatIcons[format] || FileImage
    return IconComponent
  }

  const getFormatColor = (format) => {
    return formatColors[format] || "bg-gray-500"
  }

  return (
    <section className="relative py-20 bg-gradient-to-br from-blue-50 via-white to-purple-50 overflow-hidden">
      {/* Background decoration */}
      <div className="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,white,rgba(255,255,255,0.6))] -z-10"></div>
      <div className="absolute top-0 left-1/2 -translate-x-1/2 w-full h-full">
        <div className="absolute top-20 left-10 w-72 h-72 bg-blue-200/30 rounded-full blur-3xl"></div>
        <div className="absolute top-40 right-10 w-96 h-96 bg-purple-200/30 rounded-full blur-3xl"></div>
        <div className="absolute bottom-20 left-1/3 w-80 h-80 bg-pink-200/30 rounded-full blur-3xl"></div>
      </div>

      <div className="relative max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
            Convert Images
            <span className="block text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
              Instantly & Free
            </span>
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            Transform your images between any format. Support for JPG, PNG, WebP, AVIF, GIF, TIFF, BMP, ICO, SVG, and PDF.
            Fast, secure, and completely free.
          </p>
        </div>

        {/* Conversion Interface */}
        <div className="max-w-4xl mx-auto">
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-8 mb-8">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 items-center">
              
              {/* From Format Selection */}
              <div className="space-y-3">
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  Convert From
                </label>
                <div className="relative">
                  <select
                    value={fromFormat}
                    onChange={(e) => setFromFormat(e.target.value)}
                    className="w-full px-4 py-3 bg-white border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none transition-colors appearance-none text-lg font-medium"
                  >
                    <option value="">Select format...</option>
                    {allFormats.sort().map(format => (
                      <option key={format} value={format}>
                        {format}
                      </option>
                    ))}
                  </select>
                  <div className="absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none">
                    <Upload className="h-5 w-5 text-gray-400" />
                  </div>
                </div>
                
                {fromFormat && (
                  <div className="flex items-center justify-center p-4 bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl">
                    <div className={`${getFormatColor(fromFormat)} p-3 rounded-lg mr-3`}>
                      {(() => {
                        const IconComponent = getFormatIcon(fromFormat)
                        return <IconComponent className="h-6 w-6 text-white" />
                      })()}
                    </div>
                    <span className="font-semibold text-gray-700">{fromFormat}</span>
                  </div>
                )}
              </div>

              {/* Arrow */}
              <div className="flex justify-center">
                <div className="bg-gradient-to-r from-blue-500 to-purple-500 p-3 rounded-full shadow-lg">
                  <ArrowRight className="h-6 w-6 text-white" />
                </div>
              </div>

              {/* To Format Selection */}
              <div className="space-y-3">
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  Convert To
                </label>
                <div className="relative">
                  <select
                    value={toFormat}
                    onChange={(e) => setToFormat(e.target.value)}
                    disabled={!fromFormat}
                    className="w-full px-4 py-3 bg-white border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none transition-colors appearance-none text-lg font-medium disabled:bg-gray-100 disabled:cursor-not-allowed"
                  >
                    <option value="">
                      {fromFormat ? "Select target format..." : "Choose source first..."}
                    </option>
                    {availableToFormats.sort().map(format => (
                      <option key={format} value={format}>
                        {format}
                      </option>
                    ))}
                  </select>
                  <div className="absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none">
                    <Download className="h-5 w-5 text-gray-400" />
                  </div>
                </div>

                {toFormat && (
                  <div className="flex items-center justify-center p-4 bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl">
                    <div className={`${getFormatColor(toFormat)} p-3 rounded-lg mr-3`}>
                      {(() => {
                        const IconComponent = getFormatIcon(toFormat)
                        return <IconComponent className="h-6 w-6 text-white" />
                      })()}
                    </div>
                    <span className="font-semibold text-gray-700">{toFormat}</span>
                  </div>
                )}
              </div>
            </div>

            {/* Conversion Result */}
            {conversionResult && (
              <div className="mt-8 p-6 rounded-xl border-2 border-dashed border-gray-200 bg-gray-50/50">
                {conversionResult.available ? (
                  <div className="text-center">
                    <div className="flex items-center justify-center mb-4">
                      <CheckCircle className="h-8 w-8 text-green-500 mr-3" />
                      <span className="text-lg font-semibold text-green-700">
                        Conversion Available!
                      </span>
                    </div>
                    <p className="text-gray-600 mb-6">
                      You can convert your {fromFormat} files to {toFormat} format with our free online tool.
                    </p>
                    <Link href={conversionResult.href}>
                      <button className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white font-medium py-3 px-8 rounded-lg shadow-md hover:shadow-lg transition-all duration-200">
                        Go to {fromFormat} to {toFormat} Converter
                      </button>
                    </Link>
                  </div>
                ) : (
                  <div className="text-center">
                    <div className="flex items-center justify-center mb-4">
                      <AlertCircle className="h-8 w-8 text-amber-500 mr-3" />
                      <span className="text-lg font-semibold text-amber-700">
                        Coming Soon
                      </span>
                    </div>
                    <p className="text-gray-600 mb-6">
                      We're working on adding {fromFormat} to {toFormat} conversion. Please check back soon!
                    </p>
                    <button disabled className="bg-gray-300 text-gray-600 font-medium py-3 px-8 rounded-lg cursor-not-allowed">
                      Not Available Yet
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </section>
  )
}